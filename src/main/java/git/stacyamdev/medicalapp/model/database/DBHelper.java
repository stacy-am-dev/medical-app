package git.stacyamdev.medicalapp.model.database;

import java.sql.*;

public class DBHelper {

    private static Connection connection = null;
    private static final String URL = "jdbc:hsqldb:file:~/medical-app/database/dbfile";
    private static final String USER = "SA";
    private static final String PASSWORD = "";

    public static Connection getConnection() throws ClassNotFoundException, SQLException {
        if (connection == null) {
            Class.forName("org.hsqldb.jdbc.JDBCDriver");
            connection = DriverManager.getConnection(URL, USER, PASSWORD);
            initDatabase();
        }
        return connection;
    }

    public static void closeConnection() throws SQLException {
        if (connection != null && !connection.isClosed())
            connection.close();
    }

    private static void initDatabase() throws SQLException {
        Statement statement = connection.createStatement();
        if (isTableNotExists("TABLE_PATIENT")) {
            statement.executeUpdate("CREATE TABLE TABLE_PATIENT (" +
                    "id BIGINT GENERATED BY DEFAULT AS IDENTITY(" +
                    "START WITH 1, INCREMENT BY 1) NOT NULL PRIMARY KEY,\n" +
                    "name VARCHAR(30) NOT NULL,\n" +
                    "surname VARCHAR(30) NOT NULL,\n" +
                    "patronymic VARCHAR(30) NOT NULL,\n" +
                    "phoneNumber VARCHAR(11) UNIQUE);");
            statement.executeUpdate("INSERT INTO TABLE_PATIENT(" +
                    "NAME, SURNAME, PATRONYMIC, PHONENUMBER) " +
                    "VALUES ('Дмитрий', 'Лазарев', 'Игоревич', '89376300636');");
            statement.executeUpdate("INSERT INTO TABLE_PATIENT(" +
                    "NAME, SURNAME, PATRONYMIC, PHONENUMBER) " +
                    "VALUES ('Светлана', 'Васильева', 'Даниловна', '89374589632');");
            statement.executeUpdate("INSERT INTO TABLE_PATIENT(" +
                    "NAME, SURNAME, PATRONYMIC, PHONENUMBER) " +
                    "VALUES ('Игорь', 'Иванов', 'Петрович', '89378790636');");
            statement.executeUpdate("INSERT INTO TABLE_PATIENT(" +
                    "NAME, SURNAME, PATRONYMIC, PHONENUMBER) " +
                    "VALUES ('Никита', 'Судаков', 'Иванович', '89371293636');");
            statement.executeUpdate("INSERT INTO TABLE_PATIENT(" +
                    "NAME, SURNAME, PATRONYMIC, PHONENUMBER) " +
                    "VALUES ('Алексей', 'Зотов', 'Вячеславович', '89376308636');");
            statement.executeUpdate("INSERT INTO TABLE_PATIENT(" +
                    "NAME, SURNAME, PATRONYMIC, PHONENUMBER) " +
                    "VALUES ('Елена', 'Манакова', 'Сергеевна', '89374800635');");
            statement.executeUpdate("INSERT INTO TABLE_PATIENT(" +
                    "NAME, SURNAME, PATRONYMIC, PHONENUMBER) " +
                    "VALUES ('Екатерина', 'Самойлова', 'Дмитриевна', '89375129636');");
            statement.executeUpdate("INSERT INTO TABLE_PATIENT(" +
                    "NAME, SURNAME, PATRONYMIC, PHONENUMBER) " +
                    "VALUES ('Лев', 'Аксенов', 'Николаевич', '89373690136');");
            statement.executeUpdate("INSERT INTO TABLE_PATIENT(" +
                    "NAME, SURNAME, PATRONYMIC, PHONENUMBER) " +
                    "VALUES ('Светлана', 'Солодова', 'Олеговна', '89372566126');");
            statement.executeUpdate("INSERT INTO TABLE_PATIENT(" +
                    "NAME, SURNAME, PATRONYMIC, PHONENUMBER) " +
                    "VALUES ('Вячеслав', 'Власов', 'Станович', '89376372536');");
        }
        if (isTableNotExists("TABLE_DOCTOR")) {
            statement.executeUpdate("CREATE TABLE TABLE_DOCTOR(" +
                    "id BIGINT GENERATED BY DEFAULT AS IDENTITY(" +
                    "START WITH 1, INCREMENT BY 1) NOT NULL PRIMARY KEY,\n" +
                    "name VARCHAR(30) NOT NULL,\n" +
                    "surname VARCHAR(30) NOT NULL,\n" +
                    "patronymic VARCHAR(30) NOT NULL,\n" +
                    "specialization VARCHAR(100) NOT NULL\n" +
                    ");");
            statement.executeUpdate("INSERT INTO TABLE_DOCTOR(" +
                    "NAME, SURNAME, PATRONYMIC, SPECIALIZATION) " +
                    "VALUES ('Илья', 'Буяльский', 'Васильевич', 'Хирург');");
            statement.executeUpdate("INSERT INTO TABLE_DOCTOR(" +
                    "NAME, SURNAME, PATRONYMIC, SPECIALIZATION) " +
                    "VALUES ('Николай', 'Пирогов', 'Иванович', 'Терапевт');");
            statement.executeUpdate("INSERT INTO TABLE_DOCTOR(" +
                    "NAME, SURNAME, PATRONYMIC, SPECIALIZATION) " +
                    "VALUES ('Сергей', 'Корсаков', 'Сергеевич', 'Психиатр');");
            statement.executeUpdate("INSERT INTO TABLE_DOCTOR(" +
                    "NAME, SURNAME, PATRONYMIC, SPECIALIZATION) " +
                    "VALUES ('Иван', 'Павлов', 'Петрович', 'Невропатолог');");
            statement.executeUpdate("INSERT INTO TABLE_DOCTOR(" +
                    "NAME, SURNAME, PATRONYMIC, SPECIALIZATION) " +
                    "VALUES ('Владимир', 'Демихов', 'Петрович', 'Хирург');");
            statement.executeUpdate("INSERT INTO TABLE_DOCTOR(" +
                    "NAME, SURNAME, PATRONYMIC, SPECIALIZATION) " +
                    "VALUES ('Федор', 'Гааз', 'Петрович', 'Терапевт');");
            statement.executeUpdate("INSERT INTO TABLE_DOCTOR(" +
                    "NAME, SURNAME, PATRONYMIC, SPECIALIZATION) " +
                    "VALUES ('Григорий', 'Захарьин', 'Антонович', 'Терапевт');");
        }
        if (isTableNotExists("TABLE_PRESCRIPTION")) {
            statement.executeUpdate("CREATE TABLE TABLE_PRESCRIPTION(" +
                    "id BIGINT GENERATED BY DEFAULT AS IDENTITY(" +
                    "START WITH 1, INCREMENT BY 1) NOT NULL PRIMARY KEY,\n" +
                    "description VARCHAR(1000) NOT NULL,\n" +
                    "patientId BIGINT NOT NULL,\n" +
                    "doctorId BIGINT NOT NULL,\n" +
                    "dataCreation DATE NOT NULL,\n" +
                    "validity DATE NOT NULL,\n" +
                    "priority VARCHAR(15) NOT NULL,\n" +
                    "CONSTRAINT FK_PATIENT_PRESCRIPTION FOREIGN KEY (patientId) " +
                    "REFERENCES TABLE_PATIENT(id) ON DELETE RESTRICT,\n" +
                    "CONSTRAINT FK_DOCTOR_PRESCRIPTION FOREIGN KEY (doctorId) " +
                    "REFERENCES TABLE_DOCTOR(id) ON DELETE RESTRICT" +
                    ");");
            statement.executeUpdate("INSERT INTO TABLE_PRESCRIPTION(" +
                    "DESCRIPTION, PATIENTID, DOCTORID, DATACREATION, VALIDITY, PRIORITY) " +
                    "VALUES ('Принимать Валидол', 5, 2,'2020-08-05','2020-09-05','Нормальный');");
            statement.executeUpdate("INSERT INTO TABLE_PRESCRIPTION(" +
                    "DESCRIPTION, PATIENTID, DOCTORID, DATACREATION, VALIDITY, PRIORITY) " +
                    "VALUES ('Антидепрессанты', 1, 3,'2020-09-10','2020-11-15','Срочный');");
            statement.executeUpdate("INSERT INTO TABLE_PRESCRIPTION(" +
                    "DESCRIPTION, PATIENTID, DOCTORID, DATACREATION, VALIDITY, PRIORITY) " +
                    "VALUES ('Физические упражнения', 4, 5,'2020-08-10','2021-08-10','Нормальный');");
            statement.executeUpdate("INSERT INTO TABLE_PRESCRIPTION(" +
                    "DESCRIPTION, PATIENTID, DOCTORID, DATACREATION, VALIDITY, PRIORITY) " +
                    "VALUES ('Диета', 8, 6,'2020-08-15','2020-09-15','Немедленный');");
        }
    }

    private static boolean isTableNotExists(String tableName) throws SQLException {
        boolean isExists = true;
        try (ResultSet rs = connection.getMetaData().getTables(null, null, tableName, null)) {
            while (rs.next()) {
                String tn = rs.getString("TABLE_NAME");
                if (tn != null && tn.equals(tableName)) {
                    isExists = false;
                    break;
                }
            }
        }
        return isExists;
    }
}
